import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Calendar } from "@/components/ui/calendar";
import { BookOpen, Clock, Heart, Users, Award, Target, TrendingUp, CalendarDays, Filter } from "lucide-react";
import { useState } from "react";
export function Tracker() {
    // Calendar and filtering state
    const [selectedDate, setSelectedDate] = useState(new Date());
    const [filterMode, setFilterMode] = useState("day");
    const [showCalendar, setShowCalendar] = useState(false);
    // Admin-set targets
    const adminTargets = {
        bibleStudy: { chapters: 2, description: "2 chapters daily" },
        prayer: { minutes: 30, description: "30 minutes daily" },
        prayerStretch: { minutes: 120, description: "120 minutes weekly" },
        evangelism: { people: 5, description: "Reach 5 people weekly" }
    };
    // Helper functions for date manipulation
    const getWeekStart = (date) => {
        const d = new Date(date);
        const day = d.getDay();
        const diff = d.getDate() - day;
        return new Date(d.setDate(diff));
    };
    const getWeekEnd = (date) => {
        const weekStart = getWeekStart(date);
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        return weekEnd;
    };
    const formatDateRange = (start, end) => {
        const options = { month: 'short', day: 'numeric' };
        return `${start.toLocaleDateString('en-US', options)} - ${end.toLocaleDateString('en-US', options)}`;
    };
    const getCurrentDisplayDate = () => {
        if (!selectedDate)
            return "Today";
        if (filterMode === "day") {
            return selectedDate.toLocaleDateString('en-US', {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            });
        }
        else {
            const weekStart = getWeekStart(selectedDate);
            const weekEnd = getWeekEnd(selectedDate);
            return `Week of ${formatDateRange(weekStart, weekEnd)}`;
        }
    };
    // Fixed: Added the setter for dailyProgress
    const [dailyProgress, setDailyProgress] = useState({
        bibleStudy: {
            completed: true,
            chaptersRead: 3,
            keyLesson: "Romans 8:28 - God works all things for good. Even in trials, His purpose prevails."
        },
        prayer: {
            completed: true,
            minutesPrayed: 45,
            notes: "Prayed for family, church leadership, and personal guidance for ministry decisions."
        }
    });
    const [weeklyProgress, setWeeklyProgress] = useState({
        prayerStretch: {
            completed: true,
            duration: 135,
            reflection: "Spent extended time in intercession for the church's upcoming outreach event. Felt led to pray specifically for breakthrough in our community."
        },
        evangelism: {
            completed: true,
            peopleReached: 7,
            soulsWon: 2,
            testimony: "Shared gospel with colleagues at work. Two accepted Christ! Praise God for divine appointments and open hearts."
        }
    });
    // Calculate overall stats
    const overallStats = {
        bibleStudyStreak: 12,
        prayerStreak: 15,
        weeklyGoalsCompleted: 8,
        totalSoulsWon: 18,
        completionRate: 89
    };
    const getProgressColor = (achieved, target) => {
        const percentage = (achieved / target) * 100;
        if (percentage >= 100)
            return "text-green-600";
        if (percentage >= 80)
            return "text-blue-600";
        if (percentage >= 60)
            return "text-yellow-600";
        return "text-red-600";
    };
    const getProgressBg = (achieved, target) => {
        const percentage = (achieved / target) * 100;
        if (percentage >= 100)
            return "bg-green-100";
        if (percentage >= 80)
            return "bg-blue-100";
        if (percentage >= 60)
            return "bg-yellow-100";
        return "bg-red-100";
    };
    return (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "text-center mb-6", children: [_jsx("h1", { className: "text-3xl font-bold text-gray-900 mb-2", children: "Discipleship Growth Tracker" }), _jsxs("div", { className: "bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400", children: [_jsx("p", { className: "text-blue-800 font-medium italic", children: "\"Therefore, if anyone is in Christ, the new creation has come: The old has gone, the new is here!\"" }), _jsx("p", { className: "text-blue-600 text-sm mt-1", children: "- 2 Corinthians 5:17" }), _jsx("p", { className: "text-blue-700 text-sm mt-2", children: "Keep pressing forward in your spiritual journey. Every step counts toward becoming who God has called you to be!" })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "font-serif text-lg flex items-center", children: [_jsx(CalendarDays, { className: "h-5 w-5 mr-2" }), "Date & Period Selection"] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Button, { variant: filterMode === "day" ? "default" : "outline", size: "sm", onClick: () => setFilterMode("day"), children: "Daily View" }), _jsx(Button, { variant: filterMode === "week" ? "default" : "outline", size: "sm", onClick: () => setFilterMode("week"), children: "Weekly View" })] })] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [_jsx("div", { className: "lg:col-span-1", children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("h4", { className: "font-medium", children: ["Selected ", filterMode === "day" ? "Date" : "Week"] }), _jsxs(Button, { variant: "outline", size: "sm", onClick: () => setShowCalendar(!showCalendar), children: [_jsx(Filter, { className: "h-4 w-4 mr-2" }), showCalendar ? "Hide" : "Show", " Calendar"] })] }), _jsxs("div", { className: "p-3 bg-blue-50 rounded-lg border border-blue-200", children: [_jsx("p", { className: "text-sm font-medium text-blue-800", children: getCurrentDisplayDate() }), filterMode === "week" && selectedDate && (_jsxs("p", { className: "text-xs text-blue-600 mt-1", children: [getWeekStart(selectedDate).toLocaleDateString(), " - ", getWeekEnd(selectedDate).toLocaleDateString()] }))] }), _jsxs("div", { className: "flex flex-col space-y-2", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                            const today = new Date();
                                                            setSelectedDate(today);
                                                        }, children: "Go to Today" }), filterMode === "week" && (_jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                                    if (selectedDate) {
                                                                        const prevWeek = new Date(selectedDate);
                                                                        prevWeek.setDate(selectedDate.getDate() - 7);
                                                                        setSelectedDate(prevWeek);
                                                                    }
                                                                }, children: "Previous Week" }), _jsx(Button, { variant: "outline", size: "sm", onClick: () => {
                                                                    if (selectedDate) {
                                                                        const nextWeek = new Date(selectedDate);
                                                                        nextWeek.setDate(selectedDate.getDate() + 7);
                                                                        setSelectedDate(nextWeek);
                                                                    }
                                                                }, children: "Next Week" })] }))] })] }) }), showCalendar && (_jsx("div", { className: "lg:col-span-2", children: _jsx(Calendar, { mode: "single", selected: selectedDate, onSelect: setSelectedDate, className: "rounded-md border w-full" }) })), !showCalendar && (_jsx("div", { className: "lg:col-span-2", children: _jsxs("div", { className: "p-6 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200 text-center", children: [_jsx(CalendarDays, { className: "h-8 w-8 text-gray-400 mx-auto mb-2" }), _jsx("p", { className: "text-sm text-gray-600 mb-2", children: filterMode === "day"
                                                    ? "Track your daily spiritual goals for the selected date"
                                                    : "Review and update your weekly spiritual commitments" }), _jsxs("p", { className: "text-xs text-gray-500", children: ["Click \"Show Calendar\" to select a different ", filterMode === "day" ? "date" : "week"] })] }) }))] }) })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-5 gap-4", children: [_jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-600", children: "Completion Rate" }), _jsxs("p", { className: "text-2xl font-bold text-green-600", children: [overallStats.completionRate, "%"] })] }), _jsx(Target, { className: "h-6 w-6 text-green-600" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-600", children: "Bible Study Streak" }), _jsx("p", { className: "text-2xl font-bold text-blue-600", children: overallStats.bibleStudyStreak })] }), _jsx(BookOpen, { className: "h-6 w-6 text-blue-600" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-600", children: "Prayer Streak" }), _jsx("p", { className: "text-2xl font-bold text-purple-600", children: overallStats.prayerStreak })] }), _jsx(Heart, { className: "h-6 w-6 text-purple-600" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-600", children: "Weekly Goals" }), _jsx("p", { className: "text-2xl font-bold text-orange-600", children: overallStats.weeklyGoalsCompleted })] }), _jsx(Award, { className: "h-6 w-6 text-orange-600" })] }) }) }), _jsx(Card, { children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium text-gray-600", children: "Souls Won" }), _jsx("p", { className: "text-2xl font-bold text-red-600", children: overallStats.totalSoulsWon })] }), _jsx(Users, { className: "h-6 w-6 text-red-600" })] }) }) })] }), filterMode === "day" && (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "font-serif text-xl flex items-center", children: [_jsx(TrendingUp, { className: "h-5 w-5 mr-2" }), "Daily Spiritual Goals - ", selectedDate === null || selectedDate === void 0 ? void 0 : selectedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })] }), _jsxs("p", { className: "text-sm text-gray-600", children: ["Spiritual disciplines and progress for ", getCurrentDisplayDate()] })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "border-l-4 border-l-blue-500", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "text-lg flex items-center", children: [_jsx(BookOpen, { className: "h-5 w-5 mr-2 text-blue-600" }), "Bible Study"] }), _jsxs(Badge, { className: "bg-blue-100 text-blue-800", children: ["Target: ", adminTargets.bibleStudy.description] })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("label", { className: "text-sm font-medium", children: "Did you study today?" }), _jsx(Switch, { checked: dailyProgress.bibleStudy.completed, onCheckedChange: (checked) => setDailyProgress((prev) => (Object.assign(Object.assign({}, prev), { bibleStudy: Object.assign(Object.assign({}, prev.bibleStudy), { completed: checked }) }))) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Chapters read:" }), _jsx(Input, { type: "number", value: dailyProgress.bibleStudy.chaptersRead, onChange: (e) => setDailyProgress((prev) => (Object.assign(Object.assign({}, prev), { bibleStudy: Object.assign(Object.assign({}, prev.bibleStudy), { chaptersRead: parseInt(e.target.value) || 0 }) }))), className: "w-20", min: "0" }), _jsxs("div", { className: `text-sm ${getProgressColor(dailyProgress.bibleStudy.chaptersRead, adminTargets.bibleStudy.chapters)}`, children: [dailyProgress.bibleStudy.chaptersRead, "/", adminTargets.bibleStudy.chapters, " chapters", dailyProgress.bibleStudy.chaptersRead >= adminTargets.bibleStudy.chapters && " ✅ Goal exceeded!"] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Key lesson / highlight verse:" }), _jsx(Textarea, { value: dailyProgress.bibleStudy.keyLesson, onChange: (e) => setDailyProgress((prev) => (Object.assign(Object.assign({}, prev), { bibleStudy: Object.assign(Object.assign({}, prev.bibleStudy), { keyLesson: e.target.value }) }))), className: "min-h-20", placeholder: "Share what God revealed to you today..." })] })] })] }), _jsxs(Card, { className: "border-l-4 border-l-purple-500", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "text-lg flex items-center", children: [_jsx(Heart, { className: "h-5 w-5 mr-2 text-purple-600" }), "Prayer"] }), _jsxs(Badge, { className: "bg-purple-100 text-purple-800", children: ["Target: ", adminTargets.prayer.description] })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("label", { className: "text-sm font-medium", children: "Did you pray today?" }), _jsx(Switch, { checked: dailyProgress.prayer.completed, onCheckedChange: (checked) => setDailyProgress((prev) => (Object.assign(Object.assign({}, prev), { prayer: Object.assign(Object.assign({}, prev.prayer), { completed: checked }) }))) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Minutes prayed:" }), _jsx(Input, { type: "number", value: dailyProgress.prayer.minutesPrayed, onChange: (e) => setDailyProgress((prev) => (Object.assign(Object.assign({}, prev), { prayer: Object.assign(Object.assign({}, prev.prayer), { minutesPrayed: parseInt(e.target.value) || 0 }) }))), className: "w-20", min: "0" }), _jsxs("div", { className: `text-sm ${getProgressColor(dailyProgress.prayer.minutesPrayed, adminTargets.prayer.minutes)}`, children: [dailyProgress.prayer.minutesPrayed, "/", adminTargets.prayer.minutes, " minutes", dailyProgress.prayer.minutesPrayed >= adminTargets.prayer.minutes && " ✅ Goal exceeded!"] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Prayer notes:" }), _jsx(Textarea, { value: dailyProgress.prayer.notes, onChange: (e) => setDailyProgress((prev) => (Object.assign(Object.assign({}, prev), { prayer: Object.assign(Object.assign({}, prev.prayer), { notes: e.target.value }) }))), className: "min-h-20", placeholder: "Record your prayer requests, praise reports, or insights..." })] })] })] })] }) })] })), filterMode === "week" && (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "font-serif text-xl flex items-center", children: [_jsx(Award, { className: "h-5 w-5 mr-2" }), "Weekly Spiritual Goals - ", selectedDate && formatDateRange(getWeekStart(selectedDate), getWeekEnd(selectedDate))] }), _jsxs("p", { className: "text-sm text-gray-600", children: ["Extended spiritual commitments for ", getCurrentDisplayDate()] })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "border-l-4 border-l-green-500", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "text-lg flex items-center", children: [_jsx(Clock, { className: "h-5 w-5 mr-2 text-green-600" }), "Prayer Stretch"] }), _jsxs(Badge, { className: "bg-green-100 text-green-800", children: ["Target: ", adminTargets.prayerStretch.description] })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("label", { className: "text-sm font-medium", children: "Completed this week?" }), _jsx(Switch, { checked: weeklyProgress.prayerStretch.completed, onCheckedChange: (checked) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { prayerStretch: Object.assign(Object.assign({}, prev.prayerStretch), { completed: checked }) }))) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Duration prayed (minutes):" }), _jsx(Input, { type: "number", value: weeklyProgress.prayerStretch.duration, onChange: (e) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { prayerStretch: Object.assign(Object.assign({}, prev.prayerStretch), { duration: parseInt(e.target.value) || 0 }) }))), className: "w-24", min: "0" }), _jsxs("div", { className: `text-sm ${getProgressColor(weeklyProgress.prayerStretch.duration, adminTargets.prayerStretch.minutes)}`, children: [weeklyProgress.prayerStretch.duration, "/", adminTargets.prayerStretch.minutes, " minutes", weeklyProgress.prayerStretch.duration >= adminTargets.prayerStretch.minutes && " ✅ Goal exceeded!"] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Reflection:" }), _jsx(Textarea, { value: weeklyProgress.prayerStretch.reflection, onChange: (e) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { prayerStretch: Object.assign(Object.assign({}, prev.prayerStretch), { reflection: e.target.value }) }))), className: "min-h-20", placeholder: "How did extended prayer time impact you this week?" })] })] })] }), _jsxs(Card, { className: "border-l-4 border-l-red-500", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "text-lg flex items-center", children: [_jsx(Users, { className: "h-5 w-5 mr-2 text-red-600" }), "Evangelism"] }), _jsxs(Badge, { className: "bg-red-100 text-red-800", children: ["Target: ", adminTargets.evangelism.description] })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("label", { className: "text-sm font-medium", children: "Did you evangelize this week?" }), _jsx(Switch, { checked: weeklyProgress.evangelism.completed, onCheckedChange: (checked) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { evangelism: Object.assign(Object.assign({}, prev.evangelism), { completed: checked }) }))) })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "People reached:" }), _jsx(Input, { type: "number", value: weeklyProgress.evangelism.peopleReached, onChange: (e) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { evangelism: Object.assign(Object.assign({}, prev.evangelism), { peopleReached: parseInt(e.target.value) || 0 }) }))), className: "w-20", min: "0" }), _jsxs("div", { className: `text-sm ${getProgressColor(weeklyProgress.evangelism.peopleReached, adminTargets.evangelism.people)}`, children: [weeklyProgress.evangelism.peopleReached, "/", adminTargets.evangelism.people, weeklyProgress.evangelism.peopleReached >= adminTargets.evangelism.people && " ✅"] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Souls won:" }), _jsx(Input, { type: "number", value: weeklyProgress.evangelism.soulsWon, onChange: (e) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { evangelism: Object.assign(Object.assign({}, prev.evangelism), { soulsWon: parseInt(e.target.value) || 0 }) }))), className: "w-20", min: "0" }), _jsxs("div", { className: "text-sm text-green-600 font-medium", children: ["\uD83C\uDF89 ", weeklyProgress.evangelism.soulsWon, " souls!"] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("label", { className: "text-sm font-medium", children: "Testimony / experience:" }), _jsx(Textarea, { value: weeklyProgress.evangelism.testimony, onChange: (e) => setWeeklyProgress((prev) => (Object.assign(Object.assign({}, prev), { evangelism: Object.assign(Object.assign({}, prev.evangelism), { testimony: e.target.value }) }))), className: "min-h-20", placeholder: "Share your evangelism experiences and testimonies..." })] })] })] })] }) })] })), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "font-serif text-xl flex items-center", children: [_jsx(TrendingUp, { className: "h-5 w-5 mr-2" }), "Growth Summary & Achievements"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "font-medium", children: "Current Week Progress" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { children: [_jsxs("div", { className: "flex justify-between text-sm mb-1", children: [_jsx("span", { children: "Bible Study" }), _jsx("span", { className: "text-green-600", children: "150%" })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-2", children: _jsx("div", { className: "bg-green-600 h-2 rounded-full", style: { width: '100%' } }) })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex justify-between text-sm mb-1", children: [_jsx("span", { children: "Daily Prayer" }), _jsx("span", { className: "text-green-600", children: "150%" })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-2", children: _jsx("div", { className: "bg-green-600 h-2 rounded-full", style: { width: '100%' } }) })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex justify-between text-sm mb-1", children: [_jsx("span", { children: "Prayer Stretch" }), _jsx("span", { className: "text-green-600", children: "112%" })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-2", children: _jsx("div", { className: "bg-green-600 h-2 rounded-full", style: { width: '100%' } }) })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex justify-between text-sm mb-1", children: [_jsx("span", { children: "Evangelism" }), _jsx("span", { className: "text-green-600", children: "140%" })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-2", children: _jsx("div", { className: "bg-green-600 h-2 rounded-full", style: { width: '100%' } }) })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "font-medium", children: "Recent Achievements" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center space-x-3 p-2 bg-yellow-50 rounded-lg border border-yellow-200", children: [_jsx(Award, { className: "h-5 w-5 text-yellow-600" }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium", children: "Bible Study Champion" }), _jsx("p", { className: "text-xs text-gray-600", children: "12-day streak" })] })] }), _jsxs("div", { className: "flex items-center space-x-3 p-2 bg-purple-50 rounded-lg border border-purple-200", children: [_jsx(Heart, { className: "h-5 w-5 text-purple-600" }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium", children: "Prayer Warrior" }), _jsx("p", { className: "text-xs text-gray-600", children: "15-day streak" })] })] }), _jsxs("div", { className: "flex items-center space-x-3 p-2 bg-red-50 rounded-lg border border-red-200", children: [_jsx(Users, { className: "h-5 w-5 text-red-600" }), _jsxs("div", { children: [_jsx("p", { className: "text-sm font-medium", children: "Soul Winner" }), _jsx("p", { className: "text-xs text-gray-600", children: "18 souls won this cohort" })] })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsx("h4", { className: "font-medium", children: "Keep Growing!" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "p-3 bg-green-50 rounded-lg border border-green-200", children: [_jsx("p", { className: "text-sm font-medium text-green-800", children: "Excellent Progress!" }), _jsx("p", { className: "text-xs text-green-600 mt-1", children: "You're exceeding all your goals. Your dedication to spiritual growth is inspiring!" })] }), _jsxs("div", { className: "p-3 bg-blue-50 rounded-lg border border-blue-200", children: [_jsx("p", { className: "text-sm font-medium text-blue-800", children: "Next Milestone" }), _jsx("p", { className: "text-xs text-blue-600 mt-1", children: "3 more days to reach a 20-day prayer streak. You can do it!" })] }), _jsx(Button, { className: "w-full", children: "View Detailed Analytics" })] })] })] }) })] })] }));
}
