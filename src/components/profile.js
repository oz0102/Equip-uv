import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Edit, Save } from "lucide-react";
import { useState } from "react";
export function Profile() {
    const [isEditing, setIsEditing] = useState(false);
    const [formData, setFormData] = useState({
        firstName: "John",
        lastName: "Smith",
        email: "john.smith@student.equip.academy",
        phone: "(555) 123-4567",
        address: "123 Seminary Lane, Bible City, BC 12345",
        bio: "Passionate about biblical studies and ministry preparation. Currently pursuing foundational training in theology and pastoral care.",
    });
    const studentInfo = {
        studentId: "EQ2024001",
        program: "Foundations Program",
        cohort: "Foundations 2024 Spring",
        enrollmentDate: "2024-01-08",
        expectedGraduation: "2024-12-15",
        status: "Active",
        gpa: 3.85,
        completedCredits: 24,
        totalCredits: 60,
        academicStanding: "Good Standing",
    };
    const handleInputChange = (field, value) => {
        setFormData((prev) => (Object.assign(Object.assign({}, prev), { [field]: value })));
    };
    const handleSave = () => {
        setIsEditing(false);
    };
    return (_jsxs("div", { className: "space-y-6", children: [_jsx(Card, { children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-start justify-between", children: [_jsxs("div", { className: "flex items-center space-x-6", children: [_jsx("div", { className: "w-24 h-24 bg-red-600 rounded-full flex items-center justify-center", children: _jsxs("span", { className: "text-white font-bold text-2xl", children: [formData.firstName[0], formData.lastName[0]] }) }), _jsxs("div", { children: [_jsxs("h1", { className: "font-serif text-3xl font-bold text-black", children: [formData.firstName, " ", formData.lastName] }), _jsx("p", { className: "text-lg text-gray-600", children: studentInfo.program }), _jsxs("div", { className: "flex items-center space-x-4 mt-2", children: [_jsx(Badge, { className: "bg-green-100 text-green-800", children: studentInfo.status }), _jsxs("span", { className: "text-sm text-gray-600", children: ["Student ID: ", studentInfo.studentId] })] })] })] }), _jsx(Button, { onClick: () => (isEditing ? handleSave() : setIsEditing(true)), className: "bg-red-600 hover:bg-red-700", children: isEditing ? (_jsxs(_Fragment, { children: [_jsx(Save, { className: "h-4 w-4 mr-2" }), "Save Changes"] })) : (_jsxs(_Fragment, { children: [_jsx(Edit, { className: "h-4 w-4 mr-2" }), "Edit Profile"] })) })] }) }) }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [_jsx("div", { className: "lg:col-span-1", children: _jsx(Card, { className: "bg-black text-white overflow-hidden", children: _jsx(CardContent, { className: "p-6 text-center", children: _jsxs("div", { className: "space-y-4", children: [_jsx("div", { className: "w-16 h-16 bg-red-400 rounded-full flex items-center justify-center mx-auto", children: _jsx("span", { className: "text-black font-bold text-lg", children: "EQUIP" }) }), _jsxs("h2", { className: "text-2xl font-bold text-white", children: [formData.firstName, " ", formData.lastName] }), _jsxs("p", { className: "text-red-400 text-lg font-mono", children: ["DYN/DM/", studentInfo.studentId.slice(-4)] }), _jsx("div", { className: "bg-red-400 p-4 rounded-lg mx-auto w-48 h-48 flex items-center justify-center", children: _jsx("div", { className: "grid grid-cols-8 gap-1 w-full h-full", children: Array.from({ length: 64 }).map((_, i) => (_jsx("div", { className: `${Math.random() > 0.5 ? 'bg-black' : 'bg-red-400'} rounded-sm` }, i))) }) }), _jsxs("div", { className: "space-y-1", children: [_jsx("p", { className: "text-white text-lg font-semibold", children: studentInfo.program }), _jsx("p", { className: "text-yellow-400", children: studentInfo.cohort })] }), _jsx("p", { className: "text-gray-300 text-sm", children: "Scan for verification" }), _jsxs("div", { className: "border-t border-gray-600 pt-4 space-y-1", children: [_jsx("p", { className: "text-xs text-gray-400", children: "This card remains the property of DYEN." }), _jsx("p", { className: "text-xs text-gray-400", children: "If found, please return to the nearest DYEN office." })] })] }) }) }) }), _jsxs("div", { className: "lg:col-span-2 space-y-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "font-serif", children: "Personal Information" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "firstName", children: "First Name" }), _jsx(Input, { id: "firstName", value: formData.firstName, onChange: (e) => handleInputChange("firstName", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "lastName", children: "Last Name" }), _jsx(Input, { id: "lastName", value: formData.lastName, onChange: (e) => handleInputChange("lastName", e.target.value), disabled: !isEditing })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "email", children: "Email Address" }), _jsx(Input, { id: "email", type: "email", value: formData.email, onChange: (e) => handleInputChange("email", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "phone", children: "Phone Number" }), _jsx(Input, { id: "phone", value: formData.phone, onChange: (e) => handleInputChange("phone", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "address", children: "Address" }), _jsx(Textarea, { id: "address", value: formData.address, onChange: (e) => handleInputChange("address", e.target.value), disabled: !isEditing, rows: 3 })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "bio", children: "Bio" }), _jsx(Textarea, { id: "bio", value: formData.bio, onChange: (e) => handleInputChange("bio", e.target.value), disabled: !isEditing, rows: 4 })] })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "font-serif", children: "Program Information" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Program" }), _jsx("span", { className: "font-medium", children: studentInfo.program })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Cohort" }), _jsx("span", { className: "font-medium", children: studentInfo.cohort })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Enrollment Date" }), _jsx("span", { className: "font-medium", children: new Date(studentInfo.enrollmentDate).toLocaleDateString() })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Expected Graduation" }), _jsx("span", { className: "font-medium", children: new Date(studentInfo.expectedGraduation).toLocaleDateString() })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Academic Standing" }), _jsx(Badge, { className: "bg-green-100 text-green-800", children: studentInfo.academicStanding })] })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "font-serif", children: "Academic Progress" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Current GPA" }), _jsx("span", { className: "font-bold text-green-600 text-lg", children: studentInfo.gpa })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Credits Completed" }), _jsxs("span", { className: "font-medium", children: [studentInfo.completedCredits, " / ", studentInfo.totalCredits] })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-gray-600", children: "Progress" }), _jsxs("span", { className: "font-medium", children: [Math.round((studentInfo.completedCredits / studentInfo.totalCredits) * 100), "%"] })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-2", children: _jsx("div", { className: "bg-red-600 h-2 rounded-full", style: { width: `${(studentInfo.completedCredits / studentInfo.totalCredits) * 100}%` } }) })] })] })] })] })] })] })] }));
}
