import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Edit, Save } from "lucide-react";
import { useState } from "react";
export function Profile() {
    const [isEditing, setIsEditing] = useState(false);
    const [formData, setFormData] = useState({
        firstName: "John",
        lastName: "Smith",
        email: "john.smith@student.equip.academy",
        phone: "(555) 123-4567",
        address: "123 Seminary Lane, Bible City, BC 12345",
        emergencyContactName: "Mary Smith",
        emergencyContactRelationship: "Spouse",
        emergencyContactPhone: "(555) 987-6543",
        bio: "Passionate about biblical studies and ministry preparation. Currently pursuing foundational training in theology and pastoral care.",
        goals: "To complete the Foundations program and continue to the Equip program for advanced ministry training.",
    });
    const studentInfo = {
        studentId: "EQ2024001",
        program: "Foundations Program",
        cohort: "Foundations 2024 Spring",
        enrollmentDate: "2024-01-08",
        expectedGraduation: "2024-12-15",
        status: "Active",
        gpa: 3.85,
        completedCredits: 24,
        totalCredits: 60,
        academicStanding: "Good Standing",
    };
    const academicHistory = [
        {
            semester: "Spring 2024",
            courses: [
                { code: "BIBL201", title: "Biblical Hermeneutics", credits: 3, grade: "B+" },
                { code: "THEO101", title: "Introduction to Systematic Theology", credits: 4, grade: "A-" },
                { code: "HIST201", title: "Church History", credits: 3, grade: "A" },
                { code: "PRAC201", title: "Pastoral Care and Counseling", credits: 3, grade: "B+" },
                { code: "THEO201", title: "Advanced Systematic Theology", credits: 4, grade: "B+" },
            ],
            gpa: 3.85,
        },
    ];
    const handleInputChange = (field, value) => {
        setFormData((prev) => (Object.assign(Object.assign({}, prev), { [field]: value })));
    };
    const handleSave = () => {
        // Here you would typically save to an API
        setIsEditing(false);
    };
    return (_jsxs("div", Object.assign({ className: "space-y-6" }, { children: [_jsx(Card, { children: _jsx(CardContent, Object.assign({ className: "p-6" }, { children: _jsxs("div", Object.assign({ className: "flex items-start justify-between" }, { children: [_jsxs("div", Object.assign({ className: "flex items-center space-x-6" }, { children: [_jsx("div", Object.assign({ className: "w-24 h-24 bg-red-600 rounded-full flex items-center justify-center" }, { children: _jsxs("span", Object.assign({ className: "text-white font-bold text-2xl" }, { children: [formData.firstName[0], formData.lastName[0]] })) })), _jsxs("div", { children: [_jsxs("h1", Object.assign({ className: "font-serif text-3xl font-bold text-black" }, { children: [formData.firstName, " ", formData.lastName] })), _jsx("p", Object.assign({ className: "text-lg text-gray-600" }, { children: studentInfo.program })), _jsxs("div", Object.assign({ className: "flex items-center space-x-4 mt-2" }, { children: [_jsx(Badge, Object.assign({ className: "bg-green-100 text-green-800" }, { children: studentInfo.status })), _jsxs("span", Object.assign({ className: "text-sm text-gray-600" }, { children: ["Student ID: ", studentInfo.studentId] }))] }))] })] })), _jsx(Button, Object.assign({ onClick: () => (isEditing ? handleSave() : setIsEditing(true)), className: "bg-red-600 hover:bg-red-700" }, { children: isEditing ? (_jsxs(_Fragment, { children: [_jsx(Save, { className: "h-4 w-4 mr-2" }), "Save Changes"] })) : (_jsxs(_Fragment, { children: [_jsx(Edit, { className: "h-4 w-4 mr-2" }), "Edit Profile"] })) }))] })) })) }), _jsxs(Tabs, Object.assign({ defaultValue: "personal", className: "w-full" }, { children: [_jsxs(TabsList, Object.assign({ className: "grid w-full grid-cols-4" }, { children: [_jsx(TabsTrigger, Object.assign({ value: "personal" }, { children: "Personal Info" })), _jsx(TabsTrigger, Object.assign({ value: "academic" }, { children: "Academic Info" })), _jsx(TabsTrigger, Object.assign({ value: "emergency" }, { children: "Emergency Contact" })), _jsx(TabsTrigger, Object.assign({ value: "history" }, { children: "Academic History" }))] })), _jsx(TabsContent, Object.assign({ value: "personal", className: "space-y-6" }, { children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, Object.assign({ className: "font-serif" }, { children: "Personal Information" })) }), _jsxs(CardContent, Object.assign({ className: "space-y-4" }, { children: [_jsxs("div", Object.assign({ className: "grid grid-cols-1 md:grid-cols-2 gap-4" }, { children: [_jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "firstName" }, { children: "First Name" })), _jsx(Input, { id: "firstName", value: formData.firstName, onChange: (e) => handleInputChange("firstName", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "lastName" }, { children: "Last Name" })), _jsx(Input, { id: "lastName", value: formData.lastName, onChange: (e) => handleInputChange("lastName", e.target.value), disabled: !isEditing })] })] })), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "email" }, { children: "Email Address" })), _jsx(Input, { id: "email", type: "email", value: formData.email, onChange: (e) => handleInputChange("email", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "phone" }, { children: "Phone Number" })), _jsx(Input, { id: "phone", value: formData.phone, onChange: (e) => handleInputChange("phone", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "address" }, { children: "Address" })), _jsx(Textarea, { id: "address", value: formData.address, onChange: (e) => handleInputChange("address", e.target.value), disabled: !isEditing, rows: 3 })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "bio" }, { children: "Bio" })), _jsx(Textarea, { id: "bio", value: formData.bio, onChange: (e) => handleInputChange("bio", e.target.value), disabled: !isEditing, rows: 4 })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "goals" }, { children: "Academic Goals" })), _jsx(Textarea, { id: "goals", value: formData.goals, onChange: (e) => handleInputChange("goals", e.target.value), disabled: !isEditing, rows: 3 })] })] }))] }) })), _jsx(TabsContent, Object.assign({ value: "academic", className: "space-y-6" }, { children: _jsxs("div", Object.assign({ className: "grid grid-cols-1 md:grid-cols-2 gap-6" }, { children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, Object.assign({ className: "font-serif" }, { children: "Program Information" })) }), _jsxs(CardContent, Object.assign({ className: "space-y-4" }, { children: [_jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Program" })), _jsx("span", Object.assign({ className: "font-medium" }, { children: studentInfo.program }))] })), _jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Cohort" })), _jsx("span", Object.assign({ className: "font-medium" }, { children: studentInfo.cohort }))] })), _jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Enrollment Date" })), _jsx("span", Object.assign({ className: "font-medium" }, { children: new Date(studentInfo.enrollmentDate).toLocaleDateString() }))] })), _jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Expected Graduation" })), _jsx("span", Object.assign({ className: "font-medium" }, { children: new Date(studentInfo.expectedGraduation).toLocaleDateString() }))] })), _jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Academic Standing" })), _jsx(Badge, Object.assign({ className: "bg-green-100 text-green-800" }, { children: studentInfo.academicStanding }))] }))] }))] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, Object.assign({ className: "font-serif" }, { children: "Academic Progress" })) }), _jsxs(CardContent, Object.assign({ className: "space-y-4" }, { children: [_jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Current GPA" })), _jsx("span", Object.assign({ className: "font-bold text-green-600 text-lg" }, { children: studentInfo.gpa }))] })), _jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Credits Completed" })), _jsxs("span", Object.assign({ className: "font-medium" }, { children: [studentInfo.completedCredits, " / ", studentInfo.totalCredits] }))] })), _jsxs("div", Object.assign({ className: "space-y-2" }, { children: [_jsxs("div", Object.assign({ className: "flex items-center justify-between text-sm" }, { children: [_jsx("span", Object.assign({ className: "text-gray-600" }, { children: "Progress" })), _jsxs("span", Object.assign({ className: "font-medium" }, { children: [Math.round((studentInfo.completedCredits / studentInfo.totalCredits) * 100), "%"] }))] })), _jsx("div", Object.assign({ className: "w-full bg-gray-200 rounded-full h-2" }, { children: _jsx("div", { className: "bg-red-600 h-2 rounded-full", style: { width: `${(studentInfo.completedCredits / studentInfo.totalCredits) * 100}%` } }) }))] }))] }))] })] })) })), _jsx(TabsContent, Object.assign({ value: "emergency", className: "space-y-6" }, { children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, Object.assign({ className: "font-serif" }, { children: "Emergency Contact Information" })) }), _jsxs(CardContent, Object.assign({ className: "space-y-4" }, { children: [_jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "emergencyName" }, { children: "Contact Name" })), _jsx(Input, { id: "emergencyName", value: formData.emergencyContactName, onChange: (e) => handleInputChange("emergencyContactName", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "emergencyRelationship" }, { children: "Relationship" })), _jsx(Input, { id: "emergencyRelationship", value: formData.emergencyContactRelationship, onChange: (e) => handleInputChange("emergencyContactRelationship", e.target.value), disabled: !isEditing })] }), _jsxs("div", { children: [_jsx(Label, Object.assign({ htmlFor: "emergencyPhone" }, { children: "Phone Number" })), _jsx(Input, { id: "emergencyPhone", value: formData.emergencyContactPhone, onChange: (e) => handleInputChange("emergencyContactPhone", e.target.value), disabled: !isEditing })] })] }))] }) })), _jsx(TabsContent, Object.assign({ value: "history", className: "space-y-6" }, { children: academicHistory.map((semester, index) => (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs("div", Object.assign({ className: "flex items-center justify-between" }, { children: [_jsx(CardTitle, Object.assign({ className: "font-serif" }, { children: semester.semester })), _jsxs(Badge, Object.assign({ className: "bg-blue-100 text-blue-800" }, { children: ["GPA: ", semester.gpa] }))] })) }), _jsx(CardContent, { children: _jsx("div", Object.assign({ className: "space-y-3" }, { children: semester.courses.map((course, courseIndex) => (_jsxs("div", Object.assign({ className: "flex items-center justify-between p-3 bg-gray-50 rounded-lg" }, { children: [_jsxs("div", { children: [_jsxs("h4", Object.assign({ className: "font-medium" }, { children: [course.code, ": ", course.title] })), _jsxs("p", Object.assign({ className: "text-sm text-gray-600" }, { children: [course.credits, " Credits"] }))] }), _jsx("div", Object.assign({ className: "text-right" }, { children: _jsx("div", Object.assign({ className: "text-lg font-bold text-green-600" }, { children: course.grade })) }))] }), courseIndex))) })) })] }, index))) }))] }))] })));
}
